{"version":3,"sources":["fs.js"],"names":[],"mappings":"AAAA;;;AAGI;AACJ,MAAM,KAAK,QAAQ,IAAR,CAAX;AACA,QAAQ,GAAR,CAAY,UAAZ;AACA;AACA,MAAM,OAAO,GAAG,YAAH,CAAgB,4BAAhB,CAAb;AACA,QAAQ,GAAR,CAAY,OAAO,IAAnB;AACA,QAAQ,GAAR,CAAY,KAAK,QAAL,EAAZ;AACA,QAAQ,GAAR,CAAY,qBAAZ;;AAEA;AACA,QAAQ,GAAR,CAAY,WAAZ;AACA;AACA;AACA,GAAG,QAAH,CAAY,4BAAZ,EAAyC,CAAC,GAAD,EAAK,IAAL,KAAY;AACjD,QAAG,GAAH,EAAO;AAAC,gBAAQ,KAAR,CAAc,IAAI,KAAlB,EAAyB;AAAQ;AACzC,YAAQ,GAAR,CAAY,KAAK,QAAL,EAAZ;AACH,CAHD;AAIA,QAAQ,GAAR,CAAY,iBAAZ;;AAEA;AACA;AACA;AACA,IAAI,aAAa,GAAG,gBAAH,CAAoB,yBAApB,CAAjB;AACA;AACA,WAAW,WAAX,CAAuB,OAAvB;AACA;AACA,IAAI,IAAI,EAAR;AACA,WAAW,EAAX,CAAc,MAAd,EAAqB,UAAS,KAAT,EAAe;AAChC,SAAG,KAAH;AACH,CAFD;AAGA,WAAW,EAAX,CAAc,KAAd,EAAoB,YAAU;AAC1B,YAAQ,GAAR,CAAY,CAAZ;AACH,CAFD;AAGA,WAAW,EAAX,CAAc,OAAd,EAAsB,UAAS,GAAT,EAAa;AAC/B,YAAQ,GAAR,CAAY,IAAI,KAAhB;AACH,CAFD;AAGA,QAAQ,GAAR,CAAY,YAAZ;;AAEA;AACA;AACA,IAAI,cAAc,GAAG,iBAAH,CAAqB,0BAArB,CAAlB;;AAEA,YAAY,KAAZ,CAAkB,iBAAlB,EAAoC,MAApC,E,CAA4C;AAC5C;AACA,YAAY,GAAZ;;AAEA;AACA,YAAY,EAAZ,CAAe,QAAf,EAAwB,YAAU;AAC9B,YAAQ,GAAR,CAAY,MAAZ;AACH,CAFD;AAGA,YAAY,EAAZ,CAAe,OAAf,EAAuB,UAAS,GAAT,EAAa;AAChC,YAAQ,GAAR,CAAY,IAAI,KAAhB;AACH,CAFD;AAGA,QAAQ,GAAR,CAAY,YAAZ;;AAIA;;AAEA;AACA,IAAI,gBAAgB,GAAG,gBAAH,CAAoB,wBAApB,CAApB;AACA,IAAI,iBAAiB,GAAG,iBAAH,CAAqB,4BAArB,CAArB;AACA;AACA;AACA,cAAc,IAAd,CAAmB,cAAnB;;AAEA,QAAQ,GAAR,CAAY,UAAZ;;AAGA;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA","file":"fs-compiled.js","sourcesContent":["/**\r\n * Created by lea on 2017/10/10.\r\n */\r\n    //1、阻塞读取文件示例\r\nconst fs = require(\"fs\");\r\nconsole.log(\"阻塞读取文件示例\");\r\n//同步[阻塞]\r\nconst data = fs.readFileSync(\"./asserts/text/address.txt\");\r\nconsole.log(typeof data);\r\nconsole.log(data.toString());\r\nconsole.log(\"readFileSync程序执行结束。\");\r\n\r\n//2、非阻塞读取文件示例\r\nconsole.log(\"非阻塞读取文件示例\");\r\n//异步函数用于读取文件\r\n//异步【非阻塞】\r\nfs.readFile(\"./asserts/text/address.txt\",(err,data)=>{\r\n    if(err){console.error(err.stack);return;}\r\n    console.log(data.toString());\r\n});\r\nconsole.log(\"readFile程序执行结束。\");\r\n\r\n//3、读取流\r\n//读取流【读取某个文件的内容】\r\n//创建可读流\r\nlet readStream = fs.createReadStream(\"./asserts/text/test.txt\");\r\n//设置编码为UTF-8\r\nreadStream.setEncoding(\"UTF-8\");\r\n//处理流的事件【data:当有数据可读时触发，end:没有更多的数据可读时触发，】\r\nlet d = \"\";\r\nreadStream.on(\"data\",function(chunk){\r\n    d+=chunk;\r\n});\r\nreadStream.on(\"end\",function(){\r\n    console.log(d);\r\n});\r\nreadStream.on(\"error\",function(err){\r\n    console.log(err.stack);\r\n});\r\nconsole.log(\"读取流,程序执行完毕\");\r\n\r\n//4、写入流\r\n//写入流：向某个文件写入数据\r\nlet writeStream = fs.createWriteStream(\"./asserts/text/write.txt\");\r\n\r\nwriteStream.write(\"hello my lord1!\",\"utf8\");//使用 utf8 编码写入数据\r\n//// 标记文件末尾\r\nwriteStream.end();\r\n\r\n//处理流的事件【finish:所有数据已被写入到底层系统时触发】\r\nwriteStream.on(\"finish\",function(){\r\n    console.log(\"写入完成\");\r\n});\r\nwriteStream.on(\"error\",function(err){\r\n    console.log(err.stack);\r\n});\r\nconsole.log(\"写入流程序执行完毕！\");\r\n\r\n\r\n\r\n//5、管道流【从一个流中获取数据并将数据传递到另外一个流中】，\r\n\r\n//把pwd.txt文件中的数据传递给copyPwd.txt文件\r\nlet readPwdStream = fs.createReadStream(\"./asserts/text/pwd.txt\");\r\nlet writePwdStream = fs.createWriteStream(\"./asserts/text/copyPwd.txt\");\r\n/// 管道读写操作\r\n// 读取 pwd.txt 文件内容，并将内容写入到 copyPwd.txt 文件中\r\nreadPwdStream.pipe(writePwdStream);\r\n\r\nconsole.log(\"管道程序执行完毕\");\r\n\r\n\r\n//6、链式流【用管道和链式来压缩和解压文件。】【压缩和解压分开执行，先执行压缩，再执行解压】\r\nlet zlib = require('zlib');\r\n// 压缩 pwd.txt 文件为 pwd.txt.gz\r\n\r\n//fs.createReadStream('./asserts/text/pwd.txt')\r\n//    .pipe(zlib.createGzip())\r\n//    .pipe(fs.createWriteStream('./asserts/text/pwd.txt.gz'));\r\n//console.log(\"压缩程序结束\");\r\n\r\n//解压pwd.txt.gz为pwdOne.txt\r\n\r\n// fs.createReadStream('./asserts/text/pwd.txt.gz')\r\n//    .pipe(zlib.createGunzip())\r\n//    .pipe(fs.createWriteStream('./asserts/text/pwdOne.txt'));\r\n//console.log(\"解压程序完成。\");\r\n\r\n//7、打开文件：fs.open()\r\n"]}