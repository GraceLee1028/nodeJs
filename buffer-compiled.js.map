{"version":3,"sources":["buffer.js"],"names":[],"mappings":"AAAA;;;AAGA;AACI;AACJ,IAAI,SAAS,IAAI,MAAJ,CAAW,EAAX,CAAb,C,CAA4B;AAC5B;AACA,IAAI,UAAU,IAAI,MAAJ,CAAW,gBAAX,EAA4B,OAA5B,CAAd,C,CAAmD;AACnD,IAAI,UAAU,IAAI,MAAJ,CAAW,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,CAAX,CAAd,C,CAA4C;;AAE5C;AACA,IAAI,SAAS,OAAO,KAAP,CAAa,UAAb,CAAb,C,CAAsC;AACtC,QAAQ,GAAR,CAAY,MAAZ;;AAEA;AACA,QAAQ,GAAR,CAAY,QAAQ,QAAR,EAAZ,E,CAAgC;AAChC,QAAQ,GAAR,CAAY,QAAQ,QAAR,CAAiB,OAAjB,CAAZ,E,CAAuC;AACvC,IAAI,MAAM,IAAI,MAAJ,CAAW,EAAX,CAAV;AACA,KAAI,IAAI,IAAE,CAAV,EAAY,IAAE,EAAd,EAAiB,GAAjB,EAAqB;AACjB,QAAI,CAAJ,IAAS,IAAE,CAAX;AACH;AACD,QAAQ,GAAR,CAAY,IAAI,QAAJ,EAAZ,E,CAA4B;AAC5B,QAAQ,GAAR,CAAY,IAAI,QAAJ,CAAa,OAAb,CAAZ,E,CAAmC;;AAEnC;AACA,QAAQ,GAAR,CAAY,QAAQ,MAAR,EAAZ,E,CAA8B;;;AAG9B;AACA,IAAI,UAAU,OAAO,MAAP,CAAc,CAAC,MAAD,EAAQ,OAAR,CAAd,CAAd;AACA,QAAQ,GAAR,CAAY,QAAQ,QAAR,EAAZ;;AAEA;AACA,IAAI,OAAO,IAAI,MAAJ,CAAW,IAAX,CAAX;AACA,IAAI,OAAO,IAAI,MAAJ,CAAW,IAAX,CAAX;AACA,IAAI,SAAS,KAAK,OAAL,CAAa,IAAb,CAAb;AACA,IAAG,SAAQ,CAAX,EAAa;AACT,YAAQ,GAAR,CAAa,GAAE,MAAO,IAAG,IAAK,IAAG,IAAK,IAAtC;AACH,CAFD,MAEM,IAAG,UAAU,CAAb,EAAe;AACjB,YAAQ,GAAR,CAAa,GAAE,IAAK,IAAG,IAAK,IAA5B;AACH,CAFK,MAED;AACD,YAAQ,GAAR,CAAa,GAAE,MAAO,IAAG,IAAK,IAAG,IAAK,IAAtC;AACH;;AAED;AACA,IAAI,OAAO,IAAI,MAAJ,CAAW,OAAX,CAAX;AACA,IAAI,OAAO,IAAI,MAAJ,CAAW,EAAX,CAAX;AACA,KAAK,IAAL,CAAU,IAAV,E,CAAgB;AAChB,QAAQ,GAAR,CAAa,iBAAgB,IAAK,EAAlC;;AAEA;AACA,QAAQ,GAAR,CAAY,KAAK,KAAL,CAAW,CAAX,EAAa,CAAb,EAAgB,QAAhB,EAAZ,E,CAAwC","file":"buffer-compiled.js","sourcesContent":["/**\n * Created by SZ on 2017/11/1.\n */\n//buffer:用于存放二进制数据的缓存区\n    //创建 Buffer 实例\nlet buffer = new Buffer(10);//长度为10字节的buffer\n//utf-8 是默认的编码方式，此外它同样支持以下编码：\"ascii\", \"utf8\", \"utf16le\", \"ucs2\", \"base64\" 和 \"hex\"。\nlet buffer1 = new Buffer(\"www.douban.com\",\"utf-8\");//通过给定的字符串创建\nlet buffer2 = new Buffer([1,2,2,3,3,4,5,6]);//通过给定的数组来创建\n\n//写入缓冲区\nlet length = buffer.write(\"别想找到我,归隐\");//返回实际写入的大小\nconsole.log(length);\n\n//读取数据【解码缓冲区数据并使用指定的编码返回字符串】【toString()】\nconsole.log(buffer2.toString());//将数字转成字母\nconsole.log(buffer2.toString(\"ascii\"));//将数字转成字母\nlet buf = new Buffer(10);\nfor(let i=0;i<10;i++){\n    buf[i] = i+1;\n}\nconsole.log(buf.toString());//将数字转成字母\nconsole.log(buf.toString(\"ascii\"));//将数字转成字母\n\n//将buffer转化成json对象【toJSON()】\nconsole.log(buffer1.toJSON());//输出结果是数字数组\n\n\n//缓冲区合并\nlet buffer3 = Buffer.concat([buffer,buffer1]);\nconsole.log(buffer3.toString());\n\n//缓冲区比较【compare()】\nlet buf1 = new Buffer(\"ef\");\nlet buf2 = new Buffer(\"ab\");\nlet result = buf1.compare(buf2);\nif(result <0){\n    console.log(`${result},${buf1}在${buf2}之前`);\n}else if(result == 0){\n    console.log(`${buf1}与${buf2}相同`);\n}else{\n    console.log(`${result},${buf1}在${buf2}之后`);\n}\n\n//拷贝缓冲区【copy()】\nlet buf3 = new Buffer(\"hello\");\nlet buf4 = new Buffer(20);\nbuf3.copy(buf4);//将buf3的缓冲区复制给buf4\nconsole.log(`buf4 content: ${buf4}`);\n\n//缓冲区裁剪【slice】\nconsole.log(buf3.slice(1,3).toString());//输出：el\n"]}